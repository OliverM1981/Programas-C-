#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <stdbool.h>



//perfumaria
void limpaTela(){
	system("pause");
	system("cls");
}

void cabecalho(){
	printf("**************************************************************************************\n");
	printf("###################### Trabalhando com Árvore Binária ################################\n");
	printf("**************************************************************************************\n");
}
// estrututa nó
typedef struct no {
    int conteudo;
    struct no *esquerda, *direita;
} No;

// estrutura árvore com um ponteiro para um nó
typedef struct {
    No *raiz;
    int tam;
} ArvB;

/*  Assinatura do procedimento inserirDireita()
    necessário pois é utilizado no procedimento inserirEsquerda,
    antes deste ser criado
*/
void inserirDireita(No *no, int valor);

// procedimento para inserir um elemento na subárvore esquerda
void inserirEsquerda(No *no, int valor) {
    if(no->esquerda == NULL) {
        No *novo = (No*)malloc(sizeof(No));
        novo->conteudo = valor;
        novo->esquerda = NULL;
        novo->direita = NULL;
        no->esquerda = novo;
    } else {
        if(valor < no->esquerda->conteudo)
            inserirEsquerda(no->esquerda, valor);
        if(valor > no->esquerda->conteudo)
            inserirDireita(no->esquerda, valor);
    }
}

// procedimento para inserir um elemento na subárvore direita
void inserirDireita(No *no, int valor) {
    if(no->direita == NULL) {
        No *novo = (No*)malloc(sizeof(No));
        novo->conteudo = valor;
        novo->esquerda = NULL;
        novo->direita = NULL;
        no->direita = novo;
    } else {
        if(valor > no->direita->conteudo)
            inserirDireita(no->direita, valor);
        if(valor < no->direita->conteudo)
            inserirEsquerda(no->direita, valor);
    }
}

/*
    Procedimento para inserir um elemento na árvore
    faz uso dos dois procedimentos anteriores,
    inserindo à esquerda ou à direita
*/
void inserir(ArvB *arv, int valor) {
    if(arv->raiz == NULL) {
        No *novo = (No*)malloc(sizeof(No));
        novo->conteudo = valor;
        novo->esquerda = NULL;
        novo->direita = NULL;
        arv->raiz = novo;
    } else {
        if(valor < arv->raiz->conteudo)
            inserirEsquerda(arv->raiz, valor);
        if(valor > arv->raiz->conteudo)
            inserirDireita(arv->raiz, valor);
    }
}

/*  nova versão para a inserção, mais resumida
    perceba que agora é uma função
*/
No* inserirNovaVersao(No *raiz, int valor) {
    if(raiz == NULL) {
        No *novo = (No*)malloc(sizeof(No));
        novo->conteudo = valor;
        novo->esquerda = NULL;
        novo->direita = NULL;
        return novo;
    } else {
        if(valor < raiz->conteudo)
            raiz->esquerda = inserirNovaVersao(raiz->esquerda, valor);
        if(valor > raiz->conteudo)
            raiz->direita = inserirNovaVersao(raiz->direita, valor);
        return raiz;
    }
}

// função que retorna o tamanho de uma árvore
int tamanho(No *raiz) {
    if(raiz == NULL)
        return 0;
    else
        return 1 + tamanho(raiz->esquerda) + tamanho(raiz->direita);
}

// função para buscar um elemento na árvore
int buscar(No *raiz, int chave) {
    if(raiz == NULL) {
        return 0;
    } else {
        if(raiz->conteudo == chave)
            return 1;
        else {
            if(chave < raiz->conteudo)
                return buscar(raiz->esquerda, chave);
            else
                return buscar(raiz->direita, chave);
        }
    }
}
/*  faz a impressÃ£o da árvore em ordem crescente
    esquerda - raiz - direita
*/
void imprimir(No *raiz) {
    if(raiz != NULL) {
        imprimir(raiz->esquerda);
        printf("[%d]", raiz->conteudo);
        imprimir(raiz->direita);
    }
}

// função para a remover um nó
No* remover(No *raiz, int chave) {
    if(raiz == NULL) {
        printf("Valor nao encontrado!\n");
        return NULL;
    } else {
        if(raiz->conteudo == chave) {
            // remove nós folhas (nó sem filhos)
            if(raiz->esquerda == NULL && raiz->direita == NULL) {
                free(raiz);
                return NULL;
            }
            else{
                // remover nós que possuem apenas 1 filho
                if(raiz->esquerda == NULL || raiz->direita == NULL){
                    No *aux;
                    if(raiz->esquerda != NULL)
                        aux = raiz->esquerda;
                    else
                        aux = raiz->direita;
                    free(raiz);
                    return aux;
                }
                else{
                    No *aux = raiz->esquerda;
                    while(aux->direita != NULL)
                        aux = aux->direita;
                    raiz->conteudo = aux->conteudo;
                    aux->conteudo = chave;
                    raiz->esquerda = remover(raiz->esquerda, chave);
                    return raiz;
                }
            }
        } else {
            if(chave < raiz->conteudo)
                raiz->esquerda = remover(raiz->esquerda, chave);
            else
                raiz->direita = remover(raiz->direita, chave);
            return raiz;
        }
    }
}

// função principal
int main() {
	setlocale(LC_ALL, "Portuguese");
    int op, valor;
    ArvB arv;
    arv.raiz = NULL;

    No *raiz = NULL;
    bool l = true;

    do {
    	cabecalho();
    	printf("\n\n    Menu Principal\n");
        printf("\n1 - Inserir\n2 - Imprimir\n3 - Buscar\n4 - Remover\n5 - Sair\n\n\nDigite sua opção: ");
        scanf("%d", &op);
        fflush(stdin);
        system("cls");

        switch(op) {
        
        case 1:
        	
        	cabecalho();
            printf("Digite um valor: ");
            scanf("%d", &valor);
            fflush(stdin);
            raiz = inserirNovaVersao(raiz, valor);
			printf("\n\nO valor %d foi inserido na árvore!\n\n\n", valor);
			limpaTela();           
            break;
            
        case 2:
        	cabecalho();
        	if (tamanho(raiz) == 0){
        	printf("\nA árvore binária esta vazia, não há dados a serem impressos\n\n\n");
			limpaTela();	
			} else{
				printf("\nValores na árvore binária:\n");
            	imprimir(raiz);
               	printf("\n\nQuantidade de itens na árvore %d\n\n\n", tamanho(raiz));
            	limpaTela();
			}
            
            break;
            
        case 3:
        	cabecalho();
        	if  (tamanho(raiz) == 0) {
            	printf("\nImpossivel realizar esta operação pois a árvore esta vazia!\n");
            	printf("Insira valores na árvore escolhendo a opção: 1 - Inserir.\n\n\n");
            	limpaTela();
				} else {
					printf("Qual valor deseja buscar? Insira o valor: ");
            		scanf("%d", &valor);
            		fflush(stdin);
            		if (buscar(raiz, valor) == 0){
            			printf("\nO valor %d não esta inserido na árvore\n\n\n", valor);
						limpaTela();	
					} else{
						printf("O valor %d esta inserido na árvore\n\n\n", valor);
            			limpaTela();
						}
				}
                        
            break;
            
        case 4:
        	cabecalho();
        	if  (tamanho(raiz) == 0) {
            	printf("\nImpossivel realizar esta operação pois a árvore esta vazia!\n");
            	printf("Insira valores na árvore escolhendo a opção: 1 - Inserir.\n\n\n");
            	limpaTela();
            } else {
            	printf("Qual valor deseja remover? Insira o valor: ");
            	scanf("%d", &valor);
            	fflush(stdin);
            		if (buscar(raiz, valor) == 1){
            			raiz = remover(raiz, valor);
            			printf("\nO valor %d foi removido!\n\n\n", valor);
            			limpaTela();
					} else {				
						printf("\nImpossivel remover o valor %d pois ele não esta inserido na árvore!\n\n\n", valor);
						limpaTela();
						
						}
					}
			            
            break;
            
            case 5:
            	cabecalho();
            	printf("\nSaindo...\n");
            	l = false;
            break;
        
		default:
			cabecalho();
            printf("\nOpção inválida!!!\n");
            printf("\nInsira um valor válido do Menu Principal\n\n\n");
            limpaTela();
        }
    }while(l == true);

}
